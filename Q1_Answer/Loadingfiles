# Q1. Loading the Data

import pandas as pd
import os

# 1.1 Create data frame for the main data
## Create an empty list of dataframes
dataframes = []
data_folder = "./rotate_data_case/data/flight_events/"
data_list = [file for file in os.listdir(data_folder) if file.endswith(".csv")]

## Read each CSV into a dataframe and store it in the list
for csvs in data_list:
    file_path = os.path.join(data_folder, csvs)
    df = pd.read_csv(file_path, sep = ';')
    dataframes.append(df)

## Iterate through each dataframe to print the column names
### Checking the correspondence of column names in each dataframes

for idx, df in enumerate(dataframes):
    print(f"Columns of DataFrame {idx+1}:")
    print(df.columns.tolist())
    print() # all csv files have the same columns

## Concatenate all dataframes into a single dataframe
combined_df = pd.concat(dataframes, ignore_index = True)

## Create subset of data that is relevant for the current analysis
subset_df = combined_df[['destination_icao', 'origin_icao', 'equipment', 'date']]

#%% 1.2 Load aircraft details json file
import json

data_folder_json = "./rotate_data_case/data/airplane_details.json"
airdetails = []

with open(data_folder_json, 'r') as f:
    for line in f:
        airdetails.append(json.loads(line))

# Convert it to pandas DataFrame
airdetails = pd.DataFrame(airdetails)

#%% 1.3 Merge two dataframes

## Rename equipment to code_icao
subset_df.rename(columns = {'equipment': 'code_icao'}, inplace = True)

## Use 'inner' argument to merged based on the common 'code_icao' column
## Those that do not have info about volume nor category information cannot be used

alldetails_df = pd.merge(subset_df, airdetails, on = 'code_icao', how = 'inner')

#%% 1.4 Data Proprocessing

# Handeling missing values
## 1. Check what the proportion of the missing values are
missing_rows = alldetails_df[alldetails_df.isna().any(axis = 1)]
proportion_missing = missing_rows.shape[0] / alldetails_df.shape[0]
print("Proportion of missing data in the dataset: ", proportion_missing)
print("Specific NA Proportions Per Category:\n", alldetails_df.isna().mean())

### Since the proportion is lower 1% of the data, dropna() can be used
clean_df = alldetails_df.dropna()
